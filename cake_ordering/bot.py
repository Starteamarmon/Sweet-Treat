import os
import sys
from dotenv import load_dotenv
from tortoise import Tortoise
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
import asyncio
from models import User, Order
from tortoise.exceptions import DoesNotExist

load_dotenv()

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cake_ordering.settings')
current_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(current_dir, os.pardir))
sys.path.append(project_dir)
cake_creator_id = os.getenv('EXECUTOR_ID')

import django
django.setup()


async def init():
    await Tortoise.init(
        db_url="sqlite://database.db",
        modules={"models": ["models"]}
    )
    await Tortoise.generate_schemas()


build_cake_keyboard = [
    [
        InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ—Ä–∂", callback_data='select_crust'),
        InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –Ω–∞—á–∏–Ω–∫—É", callback_data='select_filling'),
    ],
    [
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main'),
    ],
    [
        InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data='back_to_main'),
    ],
    [
        InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å',callback_data='weight_cake')
    ]
]


build_cake_base = [
    [
        InlineKeyboardButton('–í–∞–Ω–∏–ª—å–Ω—ã–π',callback_data='vanilla_base')
    ],
    [
        InlineKeyboardButton('–®–æ–∫–æ–ª–∞–¥–Ω—ã–π',callback_data='chocolate_base')
    ],
    [
        InlineKeyboardButton('–ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç',callback_data='red_velvet_base')
    ],
    [
        InlineKeyboardButton('–ú–µ–¥–æ–≤—ã–π',callback_data='honey_base')
    ],
    [
        InlineKeyboardButton('–ú–∞–∫–æ–≤—ã–π',callback_data='poppy_seed_base')
    ],
    [
        InlineKeyboardButton('–ù–∞–∑–∞–¥',callback_data='back_to_main')
    ],
]


cake_cream = [
    [
        InlineKeyboardButton('–°–º–µ—Ç–∞–Ω–Ω–æ-—Å–ª–∏–≤–æ—á–Ω—ã–π',callback_data='sour_cream')
    ],
    [
        InlineKeyboardButton('–¢–≤–æ—Ä–æ–∂–Ω–æ-—Å–ª–∏–≤–æ—á–Ω—ã–π(–∫—Ä–µ–º-—á–∏–∑)',callback_data='cream_cheese')
    ],
    [
        InlineKeyboardButton('–ì–∞–Ω–∞—à —Å –º–æ–ª–æ—á–Ω—ã–π–º —à–æ–∫–æ–ª–∞–¥–æ–º',callback_data='Milk_Chocolate_Ganache')
    ],
    [
        InlineKeyboardButton('–ì–∞–Ω–∞—à —Å –±–µ–ª—ã–º —à–æ–∫–æ–ª–∞–¥–æ–º',callback_data='white_Chocolate_Ganache')
    ],
    [
        InlineKeyboardButton('–ì–∞–Ω–∞—à —Å —Ç–µ–º–Ω—ã–º —à–æ–∫–æ–ª–∞–¥–æ–º',callback_data='black_Chocolate_Ganache')
    ],
    [
        InlineKeyboardButton('–¢–≤–æ—Ä–æ–∂–Ω–æ-—Å–ª–∏–≤–æ—á–Ω—ã–π –∫—Ä–µ–º —Å–æ —Å–≥—É—â–µ–Ω—ã–º –º–æ–ª–æ–∫–æ–º',callback_data='sour_cream_2')
    ]
]


cake_filling = [
    [
        InlineKeyboardButton('–Ø–≥–æ–¥–Ω–∞—è',callback_data='berry_filling')
    ],
    [
        InlineKeyboardButton('–ú—É—Å—Å–æ–≤–∞—è',callback_data='mousse_filling')
    ],
    [
        InlineKeyboardButton('–ì–∞–Ω–∞—à',callback_data='ganache_filling')
    ],
    [
        InlineKeyboardButton('–ö–∞—Ä–∞–º–µ–ª—å',callback_data='caramel_filling')
    ]
]
ccaramel_filling = [
    [
        InlineKeyboardButton('–ö–∞—Ä–∞–º–µ–ª—å',callback_data='caramel_filling_ok')
    ],
    [
        InlineKeyboardButton('–ö–∞—Ä–∞–º–µ–ª—å-–∞—Ä–∞—Ö–∏—Å',callback_data='caramel_peanuts')
    ],
    [
        InlineKeyboardButton('–ö–∞—Ä–∞–º–µ–ª—å-–≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö',callback_data='caramel_walnut')
    ],
    [
        InlineKeyboardButton('–ö–∞—Ä–∞–º–µ–ª—å-–±–∞–Ω–∞–Ω',callback_data='caramel_banana')
    ]
]
berry_filling = [
    [
        InlineKeyboardButton('–ú–∞–ª–∏–Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä',callback_data='raspberry_jam')
    ],
    [
        InlineKeyboardButton('–ö–ª—É–±–Ω–∏—á–Ω—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä',callback_data='strawberry_jam')
    ],
    [
        InlineKeyboardButton('–í–∏—à–Ω–µ–≤—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä',callback_data='cherry_jam')
    ],
    [
        InlineKeyboardButton('–°–º–æ—Ä–æ–¥–∏–Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä',callback_data='currant_Jam')
    ],
    [
        InlineKeyboardButton('–Ø–≥–æ–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä(–º–∏–∫—Å)',callback_data='mix_jam')
    ],
]

mousse_filling = [
    [
        InlineKeyboardButton('–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –º—É—Å—Å',callback_data='chocolate_mousse')
    ],
    [
        InlineKeyboardButton('–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π –º—É—Å—Å',callback_data='caramel_mousse')
    ],
    [
        InlineKeyboardButton('–Ø–≥–æ–¥–Ω—ã–π –º—É—Å—Å',callback_data='berry_mousse')
    ]
]


final_coating = [
    [
        InlineKeyboardButton('–ì–∞–Ω–∞—à –Ω–∞ –±–µ–ª–æ–º —à–æ–∫–æ–ª–∞–¥–µ',callback_data='final_coating_white_ganache')
    ],
    [
        InlineKeyboardButton('–ì–∞–Ω–∞—à –Ω–∞ –º–æ–ª–æ—á–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ',callback_data='final_coating_milk_ganache')
    ],
    [
        InlineKeyboardButton('–ö—Ä–µ–º-—á–∏–∑',callback_data='final_cream_cheese')
    ],
]

chocolate_mousse = [
    [
        InlineKeyboardButton('–ú—É—Å—Å –Ω–∞ –º–æ–ª–æ—á–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ',callback_data='milk_chocolate_mousse')
    ],
    [
        InlineKeyboardButton('–ú—É—Å—Å –Ω–∞ –±–µ–ª–æ–º —à–æ–∫–æ–ª–∞–¥–µ',callback_data='white_chocolate_mousse')
    ],
    [
        InlineKeyboardButton('–ú—É—Å—Å –Ω–∞ —Ç—ë–º–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ',callback_data='black_chocolate_mousse')
    ],
]

berry_mousse = [
    [
        InlineKeyboardButton('–ú–∞–ª–∏–Ω–∞',callback_data='raspberry_mousse')
    ],
    [
        InlineKeyboardButton('–ö–ª—É–±–Ω–∏–∫–∞',callback_data='strawberry_mousse')
    ],
    [
        InlineKeyboardButton('–í–∏—à–Ω—è',callback_data='cerry_mousse')
    ],
    [
        InlineKeyboardButton('C–º–æ—Ä–æ–¥–∏–Ω–∞',callback_data='currant_mousse')
    ],
    [
        InlineKeyboardButton('C–º–µ—Å—å —è–≥–æ–¥ (–º–∏–∫—Å)',callback_data='mix_mousse')
    ],
]

ganache_filling = [
    [
        InlineKeyboardButton('–ì–∞–Ω–∞—à –Ω–∞ –±–µ–ª–æ–º —à–æ–∫–æ–ª–∞–¥–µ',callback_data='ganache_filling_white')
    ],
    [
        InlineKeyboardButton('–ì–∞–Ω–∞—à –Ω–∞ –º–æ–ª–æ—á–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ',callback_data='ganache_filling_milk')
    ],
    [
        InlineKeyboardButton('–ì–∞–Ω–∞—à –Ω–∞ —Ç—ë–º–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ',callback_data='ganache_filling_black')
    ],
]
cake_build_final = [
    [
        InlineKeyboardButton('–î–∞/–ó–∞–∫–∞–∑–∞—Ç—å',callback_data='YES')
    ],
    [
        InlineKeyboardButton('–ù–µ—Ç/–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data='back_to_main')
    ]
]


build_cake_reply_markup = InlineKeyboardMarkup(build_cake_keyboard)
mousse_filling_markup = InlineKeyboardMarkup(mousse_filling)
berry_filling_markup = InlineKeyboardMarkup(berry_filling)
cake_filling_markup = InlineKeyboardMarkup(cake_filling)
ganache_filling_markup = InlineKeyboardMarkup(ganache_filling)
caramel_filling_markup = InlineKeyboardMarkup(ccaramel_filling)
berry_mousse_markup = InlineKeyboardMarkup(berry_mousse)
chocolate_mousse_markup = InlineKeyboardMarkup(chocolate_mousse)
cake_cream_markup = InlineKeyboardMarkup(cake_cream)
build_cake_base_markup=InlineKeyboardMarkup(build_cake_base)
final_coating_markup = InlineKeyboardMarkup(final_coating)
cake_build_final_markup = InlineKeyboardMarkup(cake_build_final)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.message.from_user.id
    url = f"https://127.0.0.1:8000/orders/loader/?telegram_id={telegram_id}"
    first_level_keyboard = [
    [
        InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç", web_app=WebAppInfo(url=url)),
        InlineKeyboardButton("–°–æ–±—Ä–∞—Ç—å üç∞", callback_data='build_cake'),
    ],
    ]
    first_level_reply_markup = InlineKeyboardMarkup(first_level_keyboard)
    try:
        user = await User.get(chat_id=telegram_id)
        await update.message.reply_text(
            text=f'–ü—Ä–∏–≤–µ—Ç, {user.name}!\n–•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç –∏–ª–∏ —Å–æ–±—Ä–∞—Ç—å?',
            reply_markup=first_level_reply_markup
        )
    except DoesNotExist:
        user = await User.create(
            chat_id=telegram_id,
            name=update.effective_user.full_name,
        )
        
        await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç!{update.effective_user.full_name} –•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç –∏–ª–∏ —Å–æ–±—Ä–∞—Ç—å? :', reply_markup=first_level_reply_markup)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query 
    telegram_id = query.from_user.id
    url = f"https://127.0.0.1:8000/orders/loader/?telegram_id={telegram_id}"
    first_level_keyboard = [
        [
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç", web_app=WebAppInfo(url=url)),
            InlineKeyboardButton("–°–æ–±—Ä–∞—Ç—å üç∞", callback_data='build_cake'),
        ],
    ]
    first_level_reply_markup = InlineKeyboardMarkup(first_level_keyboard)

    await query.message.edit_text(
        text='–•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç –∏–ª–∏ —Å–æ–±—Ä–∞—Ç—å?',
        reply_markup=first_level_reply_markup
    )

async def create_order_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    from orders.models import Order
    message = update.message.text
    try:
        cake_name, weight, telegram_id = message.split()
        weight = float(weight)
        telegram_id = int(telegram_id)
        order = Order(
            telegram_id=telegram_id,
            cake_name=cake_name,
            weight=weight,
        )
        order.save()
        await update.message.reply_text('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!')
    except:
        chat_id = update.effective_chat.id
        user = await User.get(chat_id=chat_id)
        context.user_data['cake_build']['–≤–µ—Å'] = float(update.message.text)
        order_summary = (
                f"–í–∞—à –∑–∞–∫–∞–∑, {user.name}!\n\n"
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä—Ç:\n"
                f"‚Ä¢ –ö–æ—Ä–∂: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n"
                f"‚Ä¢ –ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n"
                f"‚Ä¢ –ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n"
                f"‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ: {context.user_data['cake_build']['–ø–æ–∫—Ä—ã—Ç–∏–µ']}\n"
                f"‚Ä¢ –í–µ—Å: {context.user_data['cake_build']['–≤–µ—Å']} –∫–≥.\n"
            )
        await update.message.reply_text(order_summary,reply_markup=cake_build_final_markup)
        context.user_data['waiting_quantity_build_cake'] = False


async def send_message_creator(context:ContextTypes.DEFAULT_TYPE, message:str,reply_markup):
    await context.bot.send_message(chat_id=cake_creator_id, text=message,reply_markup=reply_markup)


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query 
    telegram_id = query.from_user.id
    chat_id = update.effective_chat.id
    user = await User.get(chat_id=chat_id)
    query = update.callback_query
    await query.answer()


    if query.data == "user_orders":
        user_orders = await Order.filter(user=user)
        

    elif query.data == 'build_cake':
        context.user_data['cake_build'] = {
        '–∫–æ—Ä–∂': None,
        '–Ω–∞—á–∏–Ω–∫–∞': None,
        '–∫—Ä–µ–º': None,
        '–ø–æ–∫—Ä—ã—Ç–∏–µ': None,
        '–≤–µ—Å': 0.0
        }
        await query.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–∂:', reply_markup=build_cake_base_markup)
    
    elif query.data == 'vanilla_base':
        context.user_data['cake_build']['–∫–æ—Ä–∂'] = "–í–∞–Ω–∏–ª—å–Ω—ã–π"
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–º:",reply_markup=cake_cream_markup)  
    elif query.data == 'red_velvet_base':
        context.user_data['cake_build']['–∫–æ—Ä–∂'] = "–ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç"
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–º:",reply_markup=cake_cream_markup)       
    elif query.data == 'honey_base':
        context.user_data['cake_build']['–∫–æ—Ä–∂'] = "–ú–µ–¥–æ–≤—ã–π"
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–º:",reply_markup=cake_cream_markup)         
    elif query.data == 'poppy_seed_base':
        context.user_data['cake_build']['–∫–æ—Ä–∂'] = "–ú–∞–∫–æ–≤—ã–π"
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–º:",reply_markup=cake_cream_markup) 
    elif query.data == 'chocolate_base':
        context.user_data['cake_build']['–∫–æ—Ä–∂'] = "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π"
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–º:",reply_markup=cake_cream_markup) 

    elif query.data == 'sour_cream':
        context.user_data['cake_build']['–∫—Ä–µ–º'] = '–°–º–µ—Ç–∞–Ω–Ω–æ-—Å–ª–∏–≤–æ—á–Ω—ã–π'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=cake_filling_markup)           
    elif query.data == 'cream_cheese':
        context.user_data['cake_build']['–∫—Ä–µ–º'] = '–¢–≤–æ—Ä–æ–∂–Ω–æ-—Å–ª–∏–≤–æ—á–Ω—ã–π(–∫—Ä–µ–º-—á–∏–∑'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=cake_filling_markup)            
    elif query.data == 'Milk_Chocolate_Ganache':
        context.user_data['cake_build']['–∫—Ä–µ–º'] = '–ì–∞–Ω–∞—à —Å –º–æ–ª–æ—á–Ω—ã–π–º —à–æ–∫–æ–ª–∞–¥–æ–º'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=cake_filling_markup)             
    elif query.data == 'white_Chocolate_Ganache':
        context.user_data['cake_build']['–∫—Ä–µ–º'] = '–ì–∞–Ω–∞—à —Å –±–µ–ª—ã–º —à–æ–∫–æ–ª–∞–¥–æ–º'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=cake_filling_markup)     
    elif query.data == 'black_Chocolate_Ganache':
        context.user_data['cake_build']['–∫—Ä–µ–º'] = '–ì–∞–Ω–∞—à —Å —Ç–µ–º–Ω—ã–º —à–æ–∫–æ–ª–∞–¥–æ–º'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=cake_filling_markup)          
    elif query.data == 'sour_cream_2':
        context.user_data['cake_build']['–∫—Ä–µ–º'] = '–¢–≤–æ—Ä–æ–∂–Ω–æ-—Å–ª–∏–≤–æ—á–Ω—ã–π –∫—Ä–µ–º —Å–æ —Å–≥—É—â–µ–Ω—ã–º –º–æ–ª–æ–∫–æ–º'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=cake_filling_markup)

    elif query.data == 'mousse_filling':
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=mousse_filling_markup)
    elif query.data == 'berry_filling':
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=berry_filling_markup)
    elif query.data == 'chocolate_mousse':
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:", reply_markup=chocolate_mousse_markup)
    elif query.data == 'ganache_filling':
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=ganache_filling_markup)
    elif query.data == 'caramel_filling':
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:",reply_markup=caramel_filling_markup)

    elif query.data == 'caramel_filling_ok':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–ö–∞—Ä–∞–º–µ–ª—å'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'caramel_peanuts':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–ö–∞—Ä–∞–º–µ–ª—å-–∞—Ä–∞—Ö–∏—Å'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'caramel_walnut':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–ö–∞—Ä–∞–º–µ–ª—å-–≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'caramel_banana':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–ö–∞—Ä–∞–º–µ–ª—å-–±–∞–Ω–∞–Ω'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)

    elif query.data == 'ganache_filling_white':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–ì–∞–Ω–∞—à –Ω–∞ –±–µ–ª–æ–º —à–æ–∫–æ–ª–∞–¥–µ'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'ganache_filling_milk':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–ì–∞–Ω–∞—à –Ω–∞ –º–æ–ª–æ—á–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'ganache_filling_black':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–ì–∞–Ω–∞—à –Ω–∞ —Ç—ë–º–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)

    elif query.data == 'raspberry_jam':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–ú–∞–ª–∏–Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'strawberry_jam':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–ö–ª—É–±–Ω–∏—á–Ω—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'cherry_jam':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–í–∏—à–Ω–µ–≤—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'currant_Jam':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–°–º–æ—Ä–æ–¥–∏–Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'mix_jam':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–Ø–≥–æ–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏—Ç—é—Ä(–º–∏–∫—Å)'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)    

    elif query.data == 'milk_chocolate_mousse':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–º—É—Å—Å –Ω–∞ –º–æ–ª–æ—á–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'white_chocolate_mousse':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–º—É—Å—Å –Ω–∞ –±–µ–ª–æ–º —à–æ–∫–æ–ª–∞–¥–µ'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'black_chocolate_mousse':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–º—É—Å—Å –Ω–∞ —Ç—ë–º–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    
    elif query.data == 'berry_mousse':
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–í—ã–±–µ—Ä–∏—Ç–µ —è–≥–æ–¥–Ω—ã–π –º—É—Å—Å:",reply_markup=berry_mousse_markup)

    elif query.data == 'raspberry_mousse':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–º—É—Å—Å: –ú–∞–ª–∏–Ω–∞'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'strawberry_mousse':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–º—É—Å—Å: –ö–ª—É–±–Ω–∏–∫–∞'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'cerry_mousse':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–º—É—Å—Å: –í–∏—à–Ω—è'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'currant_mousse':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–º—É—Å—Å: C–º–æ—Ä–æ–¥–∏–Ω–∞'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    elif query.data == 'mix_mousse':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–º—É—Å—Å: C–º–µ—Å—å —è–≥–æ–¥ (–º–∏–∫—Å)'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)

    elif query.data == 'caramel_mousse':
        context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞'] = '–º—É—Å—Å: –ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:",reply_markup=final_coating_markup)
    
    elif query.data == 'final_coating_white_ganache':
        context.user_data['cake_build']['–ø–æ–∫—Ä—ã—Ç–∏–µ'] = '–ì–∞–Ω–∞—à –Ω–∞ –±–µ–ª–æ–º —à–æ–∫–æ–ª–∞–¥–µ'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {context.user_data['cake_build']['–ø–æ–∫—Ä—ã—Ç–∏–µ']}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–æ—Ä—Ç–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
        context.user_data['waiting_quantity_build_cake'] = True
    elif query.data == 'final_coating_milk_ganache':
        context.user_data['cake_build']['–ø–æ–∫—Ä—ã—Ç–∏–µ'] = '–ì–∞–Ω–∞—à –Ω–∞ –º–æ–ª–æ—á–Ω–æ–º —à–æ–∫–æ–ª–∞–¥–µ'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {context.user_data['cake_build']['–ø–æ–∫—Ä—ã—Ç–∏–µ']}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–æ—Ä—Ç–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
        context.user_data['waiting_quantity_build_cake'] = True  
    elif query.data == 'final_cream_cheese':
        context.user_data['cake_build']['–ø–æ–∫—Ä—ã—Ç–∏–µ'] = '–ö—Ä–µ–º-—á–∏–∑'
        await query.edit_message_text(f"–û—Å–Ω–æ–≤–∞: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n–ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n–ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {context.user_data['cake_build']['–ø–æ–∫—Ä—ã—Ç–∏–µ']}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–æ—Ä—Ç–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
        context.user_data['waiting_quantity_build_cake'] = True



    elif query.data == 'back_to_main':
        await menu(update,context)
    
    elif query.data == 'YES':        
        order_summary = (
                f"\n‚Ä¢ –ö–æ—Ä–∂: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n"
                f"‚Ä¢ –ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n"
                f"‚Ä¢ –ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n"
                f"‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ: {context.user_data['cake_build']['–ø–æ–∫—Ä—ã—Ç–∏–µ']}\n"
                f"‚Ä¢ –í–µ—Å: {context.user_data['cake_build']['–≤–µ—Å']} –∫–≥\n"
            )
        await Order.create(user=user,order=order_summary)
        keyboard = [
            [InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ—Ç–Ω–æ–º', url=f'tg://user?id=')]
        ]
        await send_message_creator(context,f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ç–æ—Ä—Ç: {order_summary}, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.chat_id}\n tg://user?id={telegram_id}',reply_markup=InlineKeyboardMarkup(keyboard))
        # await send_message_creator(context,f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ç–æ—Ä—Ç: {order_summary}, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.chat_id}',reply_markup=InlineKeyboardMarkup(keyboard))
        await query.edit_message_text(text=f'{user.name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!ü§ó\n–ú—ã –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Å–∞üïñüì≤',reply_markup=InlineKeyboardMarkup([build_cake_keyboard[-2]]))





async def echo(update: Update, context:ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    telegram_id = update.message.from_user.id
    url = f"https://127.0.0.1:8000/orders/loader/?telegram_id={telegram_id}"
    first_level_keyboard = [
    [
        InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–æ—Ä—Ç", web_app=WebAppInfo(url=url)),
        InlineKeyboardButton("–°–æ–±—Ä–∞—Ç—å üç∞", callback_data='build_cake'),
    ],
    ]
    first_level_reply_markup = InlineKeyboardMarkup(first_level_keyboard)
    


    if context.user_data.get('waiting_quantity_build_cake'):
        user = await User.get(chat_id=chat_id)
        context.user_data['cake_build']['–≤–µ—Å'] = float(update.message.text)
        order_summary = (
                f"–í–∞—à –∑–∞–∫–∞–∑, {user.name}!\n\n"
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä—Ç:\n"
                f"‚Ä¢ –ö–æ—Ä–∂: {context.user_data['cake_build']['–∫–æ—Ä–∂']}\n"
                f"‚Ä¢ –ö—Ä–µ–º: {context.user_data['cake_build']['–∫—Ä–µ–º']}\n"
                f"‚Ä¢ –ù–∞—á–∏–Ω–∫–∞: {context.user_data['cake_build']['–Ω–∞—á–∏–Ω–∫–∞']}\n"
                f"‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ: {context.user_data['cake_build']['–ø–æ–∫—Ä—ã—Ç–∏–µ']}\n"
                f"‚Ä¢ –í–µ—Å: {context.user_data['cake_build']['–≤–µ—Å']} –∫–≥.\n"
            )
        await update.message.reply_text(order_summary,reply_markup=cake_build_final_markup)
        context.user_data['waiting_quantity_build_cake'] = False

    else:
        await update.message.reply_text("—é–∑–∞–π –∫–æ–º–∞–Ω–¥—ã")


def main():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init())
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, create_order_from_message))

    echo_handler = MessageHandler(None, echo)
    button_handler = CallbackQueryHandler(button)
    application.add_handler(echo_handler)
    application.add_handler(button_handler)

    application.run_polling()

if __name__ == '__main__':
    main()




